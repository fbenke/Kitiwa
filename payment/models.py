from django.db import models
from django.db import transaction as dbtransaction

from transaction.models import Transaction

from kitiwa.settings import MPOWER_RESPONSE_SUCCESS

from payment.api_calls import mpower


class MPowerPayment(models.Model):

    transaction = models.OneToOneField(
        Transaction,
        related_name='mpower_payment',
        help_text='Transaction associated with this payment'
    )

    mpower_opr_token = models.CharField(
        'MPower OPR Token',
        max_length=30,
        blank=True,
        help_text='OPR Token returned by MPower after initialization of an Onsite Payment Request'
    )

    mpower_confirm_token = models.CharField(
        'MPower Confirmation Token',
        max_length=10,
        blank=True,
        help_text='Token sent to user by MPower via SMS / Email to confirm Onsite Payment Request'
    )

    mpower_invoice_token = models.CharField(
        'MPower OPR Invoice Token',
        max_length=30,
        blank=True,
        help_text='Only stored for tracking record'
    )

    mpower_response_code = models.CharField(
        'MPower Response Code',
        max_length=50,
        blank=True,
        help_text='Only stored for tracking record'
    )

    mpower_response_text = models.CharField(
        'MPower Response Text',
        max_length=200,
        blank=True,
        help_text='Only stored for tracking record'
    )

    def opr_token_request(self, phone_number, amount):
        response_code, response_text, opr_token, invoice_token = (
            mpower.opr_token_request(
                mpower_phone_number=phone_number,
                amount=amount
            )
        )

        self.mpower_response_code = response_code
        self.mpower_response_text = response_text
        self.mpower_opr_token = opr_token
        self.mpower_invoice_token = invoice_token

        with dbtransaction.atomic():
            if response_code != MPOWER_RESPONSE_SUCCESS:
                self.transaction.set_invalid()

            self.save()

    @staticmethod
    def opr_token_response(transaction_id):
        mpower_payment = MPowerPayment.objects.get(transaction__id=transaction_id)
        response = {
            'response_code': mpower_payment.mpower_response_code,
            'response_text': mpower_payment.mpower_response_text
        }
        return response

    def opr_charge(self, mpower_confirm_token):

        self.mpower_confirm_token = mpower_confirm_token

        response_code, response_text = mpower.opr_charge_action(
            opr_token=self.mpower_opr_token,
            confirm_token=mpower_confirm_token
        )

        self.mpower_response_code = response_code
        self.mpower_response_text = response_text

        with dbtransaction.atomic():
            if response_code == MPOWER_RESPONSE_SUCCESS:
                self.transaction.set_paid()
            else:
                self.transaction.set_declined()

            self.save()

        return response_code, response_text


class PagaPayment(models.Model):

    transaction = models.OneToOneField(
        Transaction,
        related_name='paga_payment',
        help_text='Transaction associated with this payment'
    )
    paga_transaction_reference = models.CharField(
        'transaction reference generated by paga',
        max_length=30,
        blank=True,
        help_text='a reference code uniquely identifying the transaction'
    )

    paga_transaction_id = models.CharField(
        'transaction reference shared with user, generated by paga',
        max_length=30,
        blank=True,
        help_text='a reference to the transaction that is also shared with the user'
    )

    # this is not a DateTimeField, because paga sends a naive datetime
    paga_processed_at = models.CharField(
        'processed at',
        max_length=30,
        blank=True,
        help_text='datetime sent by paga'
    )

    status = models.CharField(
        'satus sent by paga',
        max_length=30,
        help_text='satus sent by paga',
    )
